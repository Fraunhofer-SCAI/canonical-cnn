Modules loaded....
### Libraries loaded and locked
Files already downloaded and verified
Files already downloaded and verified
### Dataset loaded and locked
### Alexnet model loaded and locked
Before changing
AlexNet(
  (features): Sequential(
    (0): Conv2d(3, 64, kernel_size=(11, 11), stride=(4, 4), padding=(2, 2))
    (1): ReLU(inplace=True)
    (2): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
    (3): Conv2d(64, 192, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
    (4): ReLU(inplace=True)
    (5): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
    (6): Conv2d(192, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (7): ReLU(inplace=True)
    (8): Conv2d(384, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (9): ReLU(inplace=True)
    (10): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (11): ReLU(inplace=True)
    (12): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(6, 6))
  (classifier): Sequential(
    (0): Dropout(p=0.5, inplace=False)
    (1): Linear(in_features=9216, out_features=4096, bias=True)
    (2): ReLU(inplace=True)
    (3): Dropout(p=0.5, inplace=False)
    (4): Linear(in_features=4096, out_features=1024, bias=True)
    (5): ReLU(inplace=True)
    (6): Linear(in_features=1024, out_features=10, bias=True)
  )
)
Computing the factors of the weight tensor
Factors calculated in  30.048799753189087  seconds
Factors shapes are: 
torch.Size([140, 64, 1, 1])
torch.Size([140, 1, 1, 5])
torch.Size([1, 140, 5, 1])
torch.Size([192, 140, 1, 1])
ABC
Conv2d(140, 64, kernel_size=(1, 1), stride=(1, 1), padding=(2, 2), bias=False)
Loading the values: 
Values are loaded
After changing
AlexNet(
  (features): Sequential(
    (0): Conv2d(3, 64, kernel_size=(11, 11), stride=(4, 4), padding=(2, 2))
    (1): ReLU(inplace=True)
    (2): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
    (3): Sequential(
      (K_s): Conv2d(140, 64, kernel_size=(1, 1), stride=(1, 1), padding=(2, 2), bias=False)
      (K_y): Conv2d(1, 140, kernel_size=(1, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (K_x): Conv2d(140, 1, kernel_size=(5, 1), stride=(1, 1), padding=(2, 2), bias=False)
      (K_t): Conv2d(192, 140, kernel_size=(1, 1), stride=(1, 1), padding=(2, 2), bias=False)
    )
    (4): ReLU(inplace=True)
    (5): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
    (6): Conv2d(192, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (7): ReLU(inplace=True)
    (8): Conv2d(384, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (9): ReLU(inplace=True)
    (10): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (11): ReLU(inplace=True)
    (12): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(6, 6))
  (classifier): Sequential(
    (0): Dropout(p=0.5, inplace=False)
    (1): Linear(in_features=9216, out_features=4096, bias=True)
    (2): ReLU(inplace=True)
    (3): Dropout(p=0.5, inplace=False)
    (4): Linear(in_features=4096, out_features=1024, bias=True)
    (5): ReLU(inplace=True)
    (6): Linear(in_features=1024, out_features=10, bias=True)
  )
)
cuda:0
### Optimizer loaded and locked
### Training started 
Epoch:  0
[1,  2000] loss: 2.439
[1,  4000] loss: 2.105
[1,  6000] loss: 2.041
[1,  8000] loss: 1.996
[1, 10000] loss: 1.965
[1, 12000] loss: 1.922
Epoch:  1
[2,  2000] loss: 1.860
[2,  4000] loss: 1.872
[2,  6000] loss: 1.834
[2,  8000] loss: 1.833
[2, 10000] loss: 1.819
[2, 12000] loss: 1.796
Epoch:  2
[3,  2000] loss: 1.768
[3,  4000] loss: 1.771
[3,  6000] loss: 1.756
[3,  8000] loss: 1.734
[3, 10000] loss: 1.746
[3, 12000] loss: 1.733
Epoch:  3
[4,  2000] loss: 1.687
[4,  4000] loss: 1.711
[4,  6000] loss: 1.676
[4,  8000] loss: 1.673
[4, 10000] loss: 1.677
[4, 12000] loss: 1.676
Epoch:  4
[5,  2000] loss: 1.641
[5,  4000] loss: 1.658
[5,  6000] loss: 1.621
[5,  8000] loss: 1.632
[5, 10000] loss: 1.609
[5, 12000] loss: 1.605
Epoch:  5
[6,  2000] loss: 1.581
[6,  4000] loss: 1.580
[6,  6000] loss: 1.578
[6,  8000] loss: 1.580
[6, 10000] loss: 1.594
[6, 12000] loss: 1.574
Epoch:  6
[7,  2000] loss: 1.549
[7,  4000] loss: 1.547
[7,  6000] loss: 1.548
[7,  8000] loss: 1.543
[7, 10000] loss: 1.534
[7, 12000] loss: 1.535
Epoch:  7
[8,  2000] loss: 1.504
[8,  4000] loss: 1.506
[8,  6000] loss: 1.507
[8,  8000] loss: 1.510
[8, 10000] loss: 1.512
[8, 12000] loss: 1.502
Epoch:  8
[9,  2000] loss: 1.464
[9,  4000] loss: 1.467
[9,  6000] loss: 1.467
[9,  8000] loss: 1.487
[9, 10000] loss: 1.463
[9, 12000] loss: 1.477
Epoch:  9
[10,  2000] loss: 1.420
[10,  4000] loss: 1.445
[10,  6000] loss: 1.431
[10,  8000] loss: 1.443
[10, 10000] loss: 1.443
[10, 12000] loss: 1.451
Finished Training of AlexNet
Accuracy of the network on the 10000 test images: 46 %
Accuracy of Airplane : 64 %
Accuracy of   Car : 61 %
Accuracy of  Bird : 27 %
Accuracy of   Cat : 17 %
Accuracy of  Deer : 36 %
Accuracy of   Dog : 31 %
Accuracy of  Frog : 52 %
Accuracy of Horse : 58 %
Accuracy of  Ship : 65 %
Accuracy of Truck : 46 %
Average accuracy =  46.059999999999995
