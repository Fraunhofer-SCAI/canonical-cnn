Modules loaded....
### Libraries loaded and locked
Files already downloaded and verified
Files already downloaded and verified
### Dataset loaded and locked
### Alexnet model loaded and locked
Before changing
AlexNet(
  (features): Sequential(
    (0): Conv2d(3, 64, kernel_size=(11, 11), stride=(4, 4), padding=(2, 2))
    (1): ReLU(inplace=True)
    (2): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
    (3): Conv2d(64, 192, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
    (4): ReLU(inplace=True)
    (5): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
    (6): Conv2d(192, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (7): ReLU(inplace=True)
    (8): Conv2d(384, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (9): ReLU(inplace=True)
    (10): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (11): ReLU(inplace=True)
    (12): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(6, 6))
  (classifier): Sequential(
    (0): Dropout(p=0.5, inplace=False)
    (1): Linear(in_features=9216, out_features=4096, bias=True)
    (2): ReLU(inplace=True)
    (3): Dropout(p=0.5, inplace=False)
    (4): Linear(in_features=4096, out_features=1024, bias=True)
    (5): ReLU(inplace=True)
    (6): Linear(in_features=1024, out_features=10, bias=True)
  )
)
Rank is :  45
Computing the factors of the weight tensor
Factors calculated in  5.488718271255493  seconds
Factors shapes are: 
torch.Size([45, 64, 1, 1])
torch.Size([45, 1, 1, 5])
torch.Size([1, 45, 5, 1])
torch.Size([192, 45, 1, 1])
ABC
Conv2d(45, 64, kernel_size=(1, 1), stride=(1, 1), padding=(2, 2), bias=False)
Loading the values: 
Values are loaded
After changing
AlexNet(
  (features): Sequential(
    (0): Conv2d(3, 64, kernel_size=(11, 11), stride=(4, 4), padding=(2, 2))
    (1): ReLU(inplace=True)
    (2): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
    (3): Sequential(
      (K_s): Conv2d(45, 64, kernel_size=(1, 1), stride=(1, 1), padding=(2, 2), bias=False)
      (K_y): Conv2d(1, 45, kernel_size=(1, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (K_x): Conv2d(45, 1, kernel_size=(5, 1), stride=(1, 1), padding=(2, 2), bias=False)
      (K_t): Conv2d(192, 45, kernel_size=(1, 1), stride=(1, 1), padding=(2, 2), bias=False)
    )
    (4): ReLU(inplace=True)
    (5): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
    (6): Conv2d(192, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (7): ReLU(inplace=True)
    (8): Conv2d(384, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (9): ReLU(inplace=True)
    (10): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (11): ReLU(inplace=True)
    (12): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(6, 6))
  (classifier): Sequential(
    (0): Dropout(p=0.5, inplace=False)
    (1): Linear(in_features=9216, out_features=4096, bias=True)
    (2): ReLU(inplace=True)
    (3): Dropout(p=0.5, inplace=False)
    (4): Linear(in_features=4096, out_features=1024, bias=True)
    (5): ReLU(inplace=True)
    (6): Linear(in_features=1024, out_features=10, bias=True)
  )
)
cuda:0
Learning rate:  0.05
### Optimizer loaded and locked
### Training started 
Epoch:  0
[1,  2000] loss: 2.241
[1,  4000] loss: 1.967
[1,  6000] loss: 1.917
[1,  8000] loss: 1.828
[1, 10000] loss: 1.760
[1, 12000] loss: 1.711
Epoch:  1
[2,  2000] loss: 1.661
[2,  4000] loss: 1.607
[2,  6000] loss: 1.574
[2,  8000] loss: 1.555
[2, 10000] loss: 1.545
[2, 12000] loss: 1.521
Epoch:  2
[3,  2000] loss: 1.443
[3,  4000] loss: 1.432
[3,  6000] loss: 1.431
[3,  8000] loss: 1.435
[3, 10000] loss: 1.414
[3, 12000] loss: 1.406
Epoch:  3
[4,  2000] loss: 1.306
[4,  4000] loss: 1.292
[4,  6000] loss: 1.273
[4,  8000] loss: 1.276
[4, 10000] loss: 1.280
[4, 12000] loss: 1.297
Epoch:  4
[5,  2000] loss: 1.160
[5,  4000] loss: 1.171
[5,  6000] loss: 1.149
[5,  8000] loss: 1.173
[5, 10000] loss: 1.176
[5, 12000] loss: 1.167
Epoch:  5
[6,  2000] loss: 1.025
[6,  4000] loss: 1.022
[6,  6000] loss: 1.047
[6,  8000] loss: 1.058
[6, 10000] loss: 1.056
[6, 12000] loss: 1.052
Epoch:  6
[7,  2000] loss: 0.863
[7,  4000] loss: 0.877
[7,  6000] loss: 0.917
[7,  8000] loss: 0.902
[7, 10000] loss: 0.911
[7, 12000] loss: 0.950
Epoch:  7
[8,  2000] loss: 0.732
[8,  4000] loss: 0.752
[8,  6000] loss: 0.780
[8,  8000] loss: 0.801
[8, 10000] loss: 0.812
[8, 12000] loss: 0.806
Epoch:  8
[9,  2000] loss: 0.568
[9,  4000] loss: 0.627
[9,  6000] loss: 0.638
[9,  8000] loss: 0.692
[9, 10000] loss: 0.696
[9, 12000] loss: 0.724
Epoch:  9
[10,  2000] loss: 0.432
[10,  4000] loss: 0.478
[10,  6000] loss: 0.550
[10,  8000] loss: 0.536
[10, 10000] loss: 0.603
[10, 12000] loss: 0.600
Finished Training of AlexNet
Accuracy of the network on the 10000 test images: 61 %
Accuracy of Airplane : 70 %
Accuracy of   Car : 74 %
Accuracy of  Bird : 58 %
Accuracy of   Cat : 45 %
Accuracy of  Deer : 53 %
Accuracy of   Dog : 40 %
Accuracy of  Frog : 70 %
Accuracy of Horse : 63 %
Accuracy of  Ship : 69 %
Accuracy of Truck : 65 %
Average accuracy =  61.14
