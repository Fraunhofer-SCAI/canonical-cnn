Modules loaded....
### Libraries loaded and locked
Files already downloaded and verified
Files already downloaded and verified
### Dataset loaded and locked
### Alexnet model loaded and locked
Before changing
AlexNet(
  (features): Sequential(
    (0): Conv2d(3, 64, kernel_size=(11, 11), stride=(4, 4), padding=(2, 2))
    (1): ReLU(inplace=True)
    (2): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
    (3): Conv2d(64, 192, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
    (4): ReLU(inplace=True)
    (5): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
    (6): Conv2d(192, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (7): ReLU(inplace=True)
    (8): Conv2d(384, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (9): ReLU(inplace=True)
    (10): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (11): ReLU(inplace=True)
    (12): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(6, 6))
  (classifier): Sequential(
    (0): Dropout(p=0.5, inplace=False)
    (1): Linear(in_features=9216, out_features=4096, bias=True)
    (2): ReLU(inplace=True)
    (3): Dropout(p=0.5, inplace=False)
    (4): Linear(in_features=4096, out_features=1024, bias=True)
    (5): ReLU(inplace=True)
    (6): Linear(in_features=1024, out_features=10, bias=True)
  )
)
Computing the factors of the weight tensor
Factors calculated in  1.1003572940826416  seconds
Factors shapes are: 
torch.Size([4, 64, 1, 1])
torch.Size([4, 1, 1, 5])
torch.Size([1, 4, 5, 1])
torch.Size([192, 4, 1, 1])
ABC
Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1), padding=(2, 2), bias=False)
Loading the values: 
Values are loaded
After changing
AlexNet(
  (features): Sequential(
    (0): Conv2d(3, 64, kernel_size=(11, 11), stride=(4, 4), padding=(2, 2))
    (1): ReLU(inplace=True)
    (2): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
    (3): Sequential(
      (K_s): Conv2d(4, 64, kernel_size=(1, 1), stride=(1, 1), padding=(2, 2), bias=False)
      (K_y): Conv2d(1, 4, kernel_size=(1, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (K_x): Conv2d(4, 1, kernel_size=(5, 1), stride=(1, 1), padding=(2, 2), bias=False)
      (K_t): Conv2d(192, 4, kernel_size=(1, 1), stride=(1, 1), padding=(2, 2), bias=False)
    )
    (4): ReLU(inplace=True)
    (5): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
    (6): Conv2d(192, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (7): ReLU(inplace=True)
    (8): Conv2d(384, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (9): ReLU(inplace=True)
    (10): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (11): ReLU(inplace=True)
    (12): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(6, 6))
  (classifier): Sequential(
    (0): Dropout(p=0.5, inplace=False)
    (1): Linear(in_features=9216, out_features=4096, bias=True)
    (2): ReLU(inplace=True)
    (3): Dropout(p=0.5, inplace=False)
    (4): Linear(in_features=4096, out_features=1024, bias=True)
    (5): ReLU(inplace=True)
    (6): Linear(in_features=1024, out_features=10, bias=True)
  )
)
cuda:0
### Optimizer loaded and locked
### Training started 
[1,  2000] loss: 2.049
[1,  4000] loss: 1.841
[1,  6000] loss: 1.733
[1,  8000] loss: 1.641
[1, 10000] loss: 1.553
[1, 12000] loss: 1.520
[2,  2000] loss: 1.418
[2,  4000] loss: 1.395
[2,  6000] loss: 1.341
[2,  8000] loss: 1.324
[2, 10000] loss: 1.298
[2, 12000] loss: 1.287
[3,  2000] loss: 1.178
[3,  4000] loss: 1.160
[3,  6000] loss: 1.146
[3,  8000] loss: 1.142
[3, 10000] loss: 1.133
[3, 12000] loss: 1.129
[4,  2000] loss: 1.001
[4,  4000] loss: 0.992
[4,  6000] loss: 0.987
[4,  8000] loss: 0.998
[4, 10000] loss: 0.980
[4, 12000] loss: 0.970
[5,  2000] loss: 0.811
[5,  4000] loss: 0.832
[5,  6000] loss: 0.850
[5,  8000] loss: 0.839
[5, 10000] loss: 0.851
[5, 12000] loss: 0.860
[6,  2000] loss: 0.642
[6,  4000] loss: 0.682
[6,  6000] loss: 0.701
[6,  8000] loss: 0.724
[6, 10000] loss: 0.731
[6, 12000] loss: 0.721
[7,  2000] loss: 0.496
[7,  4000] loss: 0.531
[7,  6000] loss: 0.556
[7,  8000] loss: 0.585
[7, 10000] loss: 0.597
[7, 12000] loss: 0.614
[8,  2000] loss: 0.374
[8,  4000] loss: 0.389
[8,  6000] loss: 0.429
[8,  8000] loss: 0.485
[8, 10000] loss: 0.477
[8, 12000] loss: 0.484
[9,  2000] loss: 0.256
[9,  4000] loss: 0.318
[9,  6000] loss: 0.349
[9,  8000] loss: 0.349
[9, 10000] loss: 0.390
[9, 12000] loss: 0.364
[10,  2000] loss: 0.228
[10,  4000] loss: 0.266
[10,  6000] loss: 0.285
[10,  8000] loss: 0.296
[10, 10000] loss: 0.299
[10, 12000] loss: 0.315
Finished Training of AlexNet
Accuracy of the network on the 10000 test images: 64 %
Accuracy of Airplane : 75 %
Accuracy of   Car : 75 %
Accuracy of  Bird : 47 %
Accuracy of   Cat : 43 %
Accuracy of  Deer : 59 %
Accuracy of   Dog : 46 %
Accuracy of  Frog : 67 %
Accuracy of Horse : 78 %
Accuracy of  Ship : 76 %
Accuracy of Truck : 76 %
Average accuracy =  64.77
