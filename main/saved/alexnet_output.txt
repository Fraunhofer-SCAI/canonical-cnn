Modules loaded....
### Libraries loaded and locked
Files already downloaded and verified
Files already downloaded and verified
### Dataset loaded and locked
### Alexnet model loaded and locked
Before changing
AlexNet(
  (features): Sequential(
    (0): Conv2d(3, 64, kernel_size=(11, 11), stride=(4, 4), padding=(2, 2))
    (1): ReLU(inplace=True)
    (2): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
    (3): Conv2d(64, 192, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
    (4): ReLU(inplace=True)
    (5): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
    (6): Conv2d(192, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (7): ReLU(inplace=True)
    (8): Conv2d(384, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (9): ReLU(inplace=True)
    (10): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (11): ReLU(inplace=True)
    (12): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(6, 6))
  (classifier): Sequential(
    (0): Dropout(p=0.5, inplace=False)
    (1): Linear(in_features=9216, out_features=4096, bias=True)
    (2): ReLU(inplace=True)
    (3): Dropout(p=0.5, inplace=False)
    (4): Linear(in_features=4096, out_features=4096, bias=True)
    (5): ReLU(inplace=True)
    (6): Linear(in_features=4096, out_features=1000, bias=True)
  )
)
Computing the factors of the weight tensor
Factors calculated in  5359.718692064285  seconds
Factors shapes are: 
torch.Size([64, 64, 1, 1])
torch.Size([64, 1, 1, 5])
torch.Size([1, 64, 5, 1])
torch.Size([192, 64, 1, 1])
ABC
Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), padding=(2, 2), bias=False)
Loading the values: 
Values are loaded
After changing
AlexNet(
  (features): Sequential(
    (0): Conv2d(3, 64, kernel_size=(11, 11), stride=(4, 4), padding=(2, 2))
    (1): ReLU(inplace=True)
    (2): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
    (3): Sequential(
      (K_s): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), padding=(2, 2), bias=False)
      (K_y): Conv2d(1, 64, kernel_size=(1, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (K_x): Conv2d(64, 1, kernel_size=(5, 1), stride=(1, 1), padding=(2, 2), bias=False)
      (K_t): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), padding=(2, 2), bias=False)
    )
    (4): ReLU(inplace=True)
    (5): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
    (6): Conv2d(192, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (7): ReLU(inplace=True)
    (8): Conv2d(384, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (9): ReLU(inplace=True)
    (10): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (11): ReLU(inplace=True)
    (12): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(6, 6))
  (classifier): Sequential(
    (0): Dropout(p=0.5, inplace=False)
    (1): Linear(in_features=9216, out_features=4096, bias=True)
    (2): ReLU(inplace=True)
    (3): Dropout(p=0.5, inplace=False)
    (4): Linear(in_features=4096, out_features=1024, bias=True)
    (5): ReLU(inplace=True)
    (6): Linear(in_features=1024, out_features=10, bias=True)
  )
)
cuda:0
### Optimizer loaded and locked
### Training started 
[1,  2000] loss: nan
[1,  4000] loss: nan
[1,  6000] loss: nan
[1,  8000] loss: nan
[1, 10000] loss: nan
[1, 12000] loss: nan
[2,  2000] loss: nan
[2,  4000] loss: nan
[2,  6000] loss: nan
[2,  8000] loss: nan
[2, 10000] loss: nan
[2, 12000] loss: nan
Finished Training of AlexNet
Accuracy of the network on the 10000 test images: 10 %
Accuracy of Airplane : 100 %
Accuracy of   Car :  0 %
Accuracy of  Bird :  0 %
Accuracy of   Cat :  0 %
Accuracy of  Deer :  0 %
Accuracy of   Dog :  0 %
Accuracy of  Frog :  0 %
Accuracy of Horse :  0 %
Accuracy of  Ship :  0 %
Accuracy of Truck :  0 %
Average accuracy =  10.0
